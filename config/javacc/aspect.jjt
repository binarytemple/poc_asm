/**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  TRACK_TOKENS = true;  static = false;  NODE_PACKAGE = "farf";  //NODE_CLASS = "AspectParser";
  //  DEBUG_LOOKAHEAD = true;
  //  DEBUG_PARSER = true;
  //  DEBUG_TOKEN_MANAGER = true;
  JJTREE_OUTPUT_DIRECTORY = "farf";}PARSER_BEGIN(EG2)package farf;import java.io.IOException;public class EG2{  java.util.Map < String, String > identifiers = new java.util.HashMap < String, String > ();
  java.util.Map < String, String > globMapping = new java.util.HashMap < String, String > ();
    public void saveAlias(String id, String fqcn)  {    System.err.println("Encountered identifer:" + id + " -> " + fqcn);    if (identifiers.containsKey(id))    {      throw new RuntimeException("duplicate alias id:" + id);    }    else    {      identifiers.put(id, fqcn);    }  }
    public void saveGlobMap(String glob, String alias) throws ParseException
  {
    
      System.err.println("glob: " + glob + " -> " + alias);
      
    if (!identifiers.containsKey(glob))
    {
      throw new ParseException("missing alias id:" + alias);
    }
    else
    {
      globMapping.put(glob, alias);
    }
  }

  public static void main(String args []) throws IOException  {    java.io.InputStream is = null;    try    {      is = foo.Util.readFile("sample/aspects.conf");      EG2 parser = new EG2(is);      try      {        SimpleNode n = parser.Start();        n.dump("");        System.out.println("Thank you.");      }      catch (Exception e)      {        System.out.println("Oops.");        System.out.println(e.getMessage());      }    }    finally    {      is.close();    }  }}PARSER_END(EG2)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN :{  < OPEN_BRACE : "{" >| < CLOSE_BRACE : "}" >| < OPEN_PAREN : "(" >| < CLOSE_PAREN : ")" >}TOKEN [ IGNORE_CASE ] :{  < LET : "let" >| < IN : "in" >| < MAPTO : "->" >| < NI : "ni" >| < ALIASES : "aliases" > //: IN_ALIASES
| < MATCHERS : "matchers" > //: IN_MATCHERS
}TOKEN : /* LITERALS */{  < INTEGER_LITERAL :    < DECIMAL_LITERAL > ([ "l", "L" ])?  | < HEX_LITERAL > ([ "l", "L" ])?  | < OCTAL_LITERAL > ([ "l", "L" ])? >| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >}TOKEN :{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >}TOKEN :{  < GLOB :    (      < LETTER >    | < DIGIT >    | "*"    )+ >}TOKEN :{  < FQCN : (< IDENTIFIER > ".")* < IDENTIFIER >>}TOKEN :{  < METHOD_GLOB :    (      < GLOB >    | "."    )*    < OPEN_PAREN > < CLOSE_PAREN >>}SimpleNode Start() :{}{  Expression()  {    return jjtThis;  }}void Expression() :{}{  AliasSection() MatchersSection()}void AliasSection() :{}{  < ALIASES > < OPEN_BRACE >  (    Alias()  )*  < CLOSE_BRACE >}void MatchersSection() :{}{  < MATCHERS > < OPEN_BRACE >  (    Matcher()  )*  < CLOSE_BRACE >}void Alias() :{  String id = null;  String fqcn = null;}{  < IDENTIFIER >  {    id = token.image;  }  "=" < FQCN >  {    fqcn = token.image;  }  ";"  {    saveAlias(id, fqcn);  }}void Matcher() :{  String glob = null;  String alias = null;}{  < METHOD_GLOB >  {    glob = token.image;  }  < MAPTO > < IDENTIFIER >  {    alias = token.image;  }  ";"  {   
    saveGlobMap(glob,alias);  }}
