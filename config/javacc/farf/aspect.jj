/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. aspect.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";                        static = false;                                                        
                             
                          
                                 
                                   }PARSER_BEGIN(EG2)package farf;import java.io.IOException;public class EG2/*@bgen(jjtree)*/implements EG2TreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTEG2State jjtree = new JJTEG2State();

/*@egen*/  java.util.Map < String, String > identifiers = new java.util.HashMap < String, String > ();  java.util.Map < String, String > globMapping = new java.util.HashMap < String, String > ();  public void saveAlias(Token id, Token fqcn)  {    System.err.println("Encountered identifer:" + id + " -> " + fqcn);    if (identifiers.containsKey(id.image))    {      throw new RuntimeException("duplicate alias id:" + id);    }    else    {      identifiers.put(id.image, fqcn.image);    }  }  public ParseException saveGlobMap(Token glob, Token alias)  {    System.err.println("glob: " + glob + " -> " + alias);    if (!identifiers.containsKey(alias.image))    {      return new ParseException("Missing alias '" + alias + "' at line:" +
      token.beginLine + ", column:" + token.beginColumn);    }    else    {      globMapping.put(glob.image, alias.image);    }    return null;  }  public static void main(String args []) throws IOException  {    java.io.InputStream is = null;    try    {      is = foo.Util.readFile("sample/aspects.conf");      EG2 parser = new EG2(is);      try      {        SimpleNode n = parser.Start();        n.dump("");        System.out.println("Thank you.");      }      catch (Exception e)      {        System.out.println("Oops.");        System.out.println(e.getMessage());      }    }    finally    {      is.close();    }  }}PARSER_END(EG2)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN :{  < OPEN_BRACE : "{" >| < CLOSE_BRACE : "}" >| < OPEN_PAREN : "(" >| < CLOSE_PAREN : ")" >}TOKEN [ IGNORE_CASE ] :{  < LET : "let" >| < IN : "in" >| < MAPTO : "->" >| < NI : "ni" >| < ALIASES : "aliases" > //: IN_ALIASES
| < MATCHERS : "matchers" > //: IN_MATCHERS
}TOKEN : /* LITERALS */{  < INTEGER_LITERAL :    < DECIMAL_LITERAL > ([ "l", "L" ])?  | < HEX_LITERAL > ([ "l", "L" ])?  | < OCTAL_LITERAL > ([ "l", "L" ])? >| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >}TOKEN :{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >}TOKEN :{  < GLOB :    (      < LETTER >    | < DIGIT >    | "*"    )+ >}TOKEN :{  < FQCN : (< IDENTIFIER > ".")* < IDENTIFIER >>}TOKEN :{  < METHOD_GLOB :    (      < GLOB >    | "."    )*    < OPEN_PAREN > < CLOSE_PAREN >>}SimpleNode Start() :{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}{/*@bgen(jjtree) Start */
  try {
/*@egen*/  Expression()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/}void Expression() :{/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}{/*@bgen(jjtree) Expression */
  try {
/*@egen*/  AliasSection() MatchersSection()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/}void AliasSection() :{/*@bgen(jjtree) AliasSection */
  SimpleNode jjtn000 = new SimpleNode(JJTALIASSECTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}{/*@bgen(jjtree) AliasSection */
  try {
/*@egen*/  < ALIASES > < OPEN_BRACE >  (    Alias()  )*  < CLOSE_BRACE >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/}void MatchersSection() :{/*@bgen(jjtree) MatchersSection */
  SimpleNode jjtn000 = new SimpleNode(JJTMATCHERSSECTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}{/*@bgen(jjtree) MatchersSection */
  try {
/*@egen*/  < MATCHERS > < OPEN_BRACE >  (    Matcher()  )*  < CLOSE_BRACE >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/}void Alias() :{/*@bgen(jjtree) Alias */
  SimpleNode jjtn000 = new SimpleNode(JJTALIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/  Token id = null;  Token fqcn = null;}{/*@bgen(jjtree) Alias */
  try {
/*@egen*/  < IDENTIFIER >  {    id = token;  }  "=" < FQCN >  {    fqcn = token;  }  ";"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/  {    saveAlias(id, fqcn);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/}void Matcher() :{/*@bgen(jjtree) Matcher */
  SimpleNode jjtn000 = new SimpleNode(JJTMATCHER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/  Token glob = null;  Token alias = null;}{/*@bgen(jjtree) Matcher */
  try {
/*@egen*/  < METHOD_GLOB >  {    glob = token;  }  < MAPTO > < IDENTIFIER >  {    alias = token;  }  ";"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/  {    ParseException p = saveGlobMap(glob, alias);    if (p != null) throw p;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/}
