options{  TRACK_TOKENS = true;  MULTI = true;  NODE_PACKAGE = "ie.hunt.aop.conf";  VISITOR = true;  static = false;  JDK_VERSION = "1.6";  NODE_CLASS = "CustomNode";  VISITOR_DATA_TYPE = "@SuppressWarnings(\"rawtypes\") java.util.Map";  //NODE_CLASS = "AspectParser";  //  DEBUG_LOOKAHEAD = true;  //  DEBUG_PARSER = true;  //  DEBUG_TOKEN_MANAGER = true;  //JJTREE_OUTPUT_DIRECTORY = "farf";}PARSER_BEGIN(AspectConfParser)package ie.hunt.aop.conf;@SuppressWarnings("unused")public class AspectConfParser{  java.util.Map < String, String > identifiers = new java.util.HashMap < String, String > ();  java.util.Map < String, String > globMapping = new java.util.HashMap < String, String > ();  public void saveAlias(Token id, Token fqcn) throws ParseException  {    // System.err.println("Encountered identifer:" + id + " -> " + fqcn);    if (identifiers.containsKey(id.image))    {      throw new ParseException("duplicate alias id:" + id);    }    else    {      identifiers.put(id.image, fqcn.image);    }  }  public void saveGlobMap(Token glob, Token alias) throws ParseException  {    //System.err.println("glob: " + glob + " -> " + alias);    if (!identifiers.containsKey(alias.image))    {      throw new ParseException("Missing alias '" + alias + "' at line:" + token.beginLine + ", column:" + token.beginColumn);    }    else    {      globMapping.put(glob.image, alias.image);    }  } }PARSER_END(AspectConfParser)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN :{  < OPEN_BRACE : "{" >| < CLOSE_BRACE : "}" >| < OPEN_PAREN : "(" >| < CLOSE_PAREN : ")" >}TOKEN [ IGNORE_CASE ] :{  < LET : "let" >| < IN : "in" >| < MAPTO : "->" >| < NI : "ni" >| < ALIASES : "aliases" > //: IN_ALIASES| < MATCHERS : "matchers" > //: IN_MATCHERS}TOKEN : /* LITERALS */{  < INTEGER_LITERAL :    < DECIMAL_LITERAL > ([ "l", "L" ])?  | < HEX_LITERAL > ([ "l", "L" ])?  | < OCTAL_LITERAL > ([ "l", "L" ])? >| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >}TOKEN :{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >}TOKEN :{  < GLOB :    (      < LETTER >    | < DIGIT >    | "*"    )+ >}TOKEN :{  < FQCN : (< IDENTIFIER > ".")* < IDENTIFIER >>}TOKEN :{  < METHOD_GLOB :    (      < GLOB >    | "."    )*    < OPEN_PAREN > < CLOSE_PAREN >>}SimpleNode Start() :{}{  Expression()  {    return jjtThis;  }}void Expression() :{}{  AliasSection() MatchersSection() < EOF >}void AliasSection() :{}{  < ALIASES > < OPEN_BRACE >  (    Alias()  )*  < CLOSE_BRACE >}void MatchersSection() :{}{  < MATCHERS > < OPEN_BRACE >  (    Matcher()  )*  < CLOSE_BRACE >}void Alias() :{  Token id = null;  Token fqcn = null;}{  < IDENTIFIER >  {    id = token;  }  "=" < FQCN >  {    fqcn = token;  }  ";"  {    saveAlias(id, fqcn);   jjtThis.value = id.image;   }}void Matcher() :{  Token glob = null;  Token alias = null;}{  < METHOD_GLOB >  {    glob = token;  }  < MAPTO > < IDENTIFIER >  {    alias = token;  }  ";"  {    saveGlobMap(glob, alias);  }}